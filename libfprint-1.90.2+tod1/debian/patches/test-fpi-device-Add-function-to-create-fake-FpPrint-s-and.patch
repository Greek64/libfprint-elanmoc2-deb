From: =?utf-8?b?Ik1hcmNvIFRyZXZpc2FuIChUcmV2acOxbyki?= <mail@3v1n0.net>
Date: Wed, 9 Dec 2020 11:13:04 +0100
Subject: test-fpi-device: Add function to create fake FpPrint's and galleries

Origin: https://gitlab.freedesktop.org/libfprint/libfprint/-/commit/faade9
Bug-Ubuntu: https://bugs.launchpad.net/ubuntu/+source/libfprint/+bug/1908107
---
 tests/test-fpi-device.c | 152 ++++++++++++++++++++++++++++++------------------
 1 file changed, 94 insertions(+), 58 deletions(-)

diff --git a/tests/test-fpi-device.c b/tests/test-fpi-device.c
index d415258..82baafc 100644
--- a/tests/test-fpi-device.c
+++ b/tests/test-fpi-device.c
@@ -89,6 +89,29 @@ auto_reset_device_class_cleanup (FpAutoResetClass *dev_class)
 }
 G_DEFINE_AUTOPTR_CLEANUP_FUNC (FpAutoResetClass, auto_reset_device_class_cleanup)
 
+
+static void
+assert_equal_galleries (GPtrArray *g1,
+                        GPtrArray *g2)
+{
+  unsigned i;
+
+  g_assert ((g1 && g2) || (!g1 || !g1));
+
+  if (g1 == g2)
+    return;
+
+  g_assert_cmpuint (g1->len, ==, g2->len);
+
+  for (i = 0; i < g1->len; i++)
+    {
+      FpPrint *print = g_ptr_array_index (g1, i);
+
+      g_assert_true (g_ptr_array_find_with_equal_func (g2, print, (GEqualFunc)
+                                                       fp_print_equal, NULL));
+    }
+}
+
 static void
 on_device_notify (FpDevice *device, GParamSpec *spec, gpointer user_data)
 {
@@ -98,6 +121,43 @@ on_device_notify (FpDevice *device, GParamSpec *spec, gpointer user_data)
   fake_dev->user_data = g_param_spec_ref (spec);
 }
 
+static FpPrint *
+make_fake_print (FpDevice *device,
+                 GVariant *print_data)
+{
+  FpPrint *enrolled_print = fp_print_new (device);
+
+  fpi_print_set_type (enrolled_print, FPI_PRINT_RAW);
+
+  if (!print_data)
+    print_data = g_variant_new_string ("Test print private data");
+  g_object_set (G_OBJECT (enrolled_print), "fpi-data", print_data, NULL);
+
+  return enrolled_print;
+}
+
+static FpPrint *
+make_fake_print_reffed (FpDevice *device,
+                        GVariant *print_data)
+{
+  return g_object_ref_sink (make_fake_print (device, print_data));
+}
+
+static GPtrArray *
+make_fake_prints_gallery (FpDevice *device,
+                          size_t    size)
+{
+  GPtrArray *array;
+  size_t i;
+
+  array = g_ptr_array_new_full (size, g_object_unref);
+
+  for (i = 0; i < size; i++)
+    g_ptr_array_add (array, make_fake_print_reffed (device, g_variant_new_uint64 (i)));
+
+  return array;
+}
+
 /* Tests */
 
 static void
@@ -529,7 +589,7 @@ test_driver_enroll_error_no_print (void)
                          "*Driver passed an error but also provided a print, returning error*");
 
   fake_dev->ret_error = fpi_device_error_new (FP_DEVICE_ERROR_GENERAL);
-  fake_dev->ret_print = fp_print_new (device);
+  fake_dev->ret_print = make_fake_print_reffed (device, NULL);
   g_object_add_weak_pointer (G_OBJECT (fake_dev->ret_print),
                              (gpointer) (&fake_dev->ret_print));
   out_print =
@@ -620,7 +680,8 @@ test_driver_enroll_progress_vfunc (FpDevice *device)
 
   expected_data->completed_stages =
     g_random_int_range (fp_device_get_nr_enroll_stages (device), G_MAXINT32);
-  expected_data->print = fp_print_new (device);
+  expected_data->print = make_fake_print_reffed (device,
+                                                 g_variant_new_int32 (expected_data->completed_stages));
   expected_data->error = NULL;
 
   error = fpi_device_error_new (FP_DEVICE_ERROR_GENERAL);
@@ -731,7 +792,7 @@ test_driver_verify (void)
 {
   g_autoptr(GError) error = NULL;
   g_autoptr(FpAutoCloseDevice) device = auto_close_fake_device_new ();
-  g_autoptr(FpPrint) enrolled_print = g_object_ref_sink (fp_print_new (device));
+  g_autoptr(FpPrint) enrolled_print = make_fake_print_reffed (device, NULL);
   g_autoptr(FpPrint) out_print = NULL;
   g_autoptr(MatchCbData) match_data = g_new0 (MatchCbData, 1);
   FpDeviceClass *dev_class = FP_DEVICE_GET_CLASS (device);
@@ -761,13 +822,14 @@ test_driver_verify_fail (void)
 {
   g_autoptr(GError) error = NULL;
   g_autoptr(FpAutoCloseDevice) device = auto_close_fake_device_new ();
-  g_autoptr(FpPrint) enrolled_print = g_object_ref_sink (fp_print_new (device));
+  g_autoptr(FpPrint) enrolled_print = NULL;
   g_autoptr(FpPrint) out_print = NULL;
   g_autoptr(MatchCbData) match_data = g_new0 (MatchCbData, 1);
   FpDeviceClass *dev_class = FP_DEVICE_GET_CLASS (device);
   FpiDeviceFake *fake_dev = FPI_DEVICE_FAKE (device);
   gboolean match;
 
+  enrolled_print = make_fake_print_reffed (device, g_variant_new_uint64 (3));
   fake_dev->ret_result = FPI_MATCH_FAIL;
   fp_device_verify_sync (device, enrolled_print, NULL,
                          test_driver_match_cb, match_data,
@@ -790,7 +852,7 @@ test_driver_verify_retry (void)
 {
   g_autoptr(GError) error = NULL;
   g_autoptr(FpAutoCloseDevice) device = auto_close_fake_device_new ();
-  g_autoptr(FpPrint) enrolled_print = g_object_ref_sink (fp_print_new (device));
+  g_autoptr(FpPrint) enrolled_print = make_fake_print_reffed (device, NULL);
   g_autoptr(FpPrint) out_print = NULL;
   g_autoptr(MatchCbData) match_data = g_new0 (MatchCbData, 1);
   FpDeviceClass *dev_class = FP_DEVICE_GET_CLASS (device);
@@ -818,7 +880,7 @@ test_driver_verify_error (void)
 {
   g_autoptr(GError) error = NULL;
   g_autoptr(FpAutoCloseDevice) device = auto_close_fake_device_new ();
-  g_autoptr(FpPrint) enrolled_print = g_object_ref_sink (fp_print_new (device));
+  g_autoptr(FpPrint) enrolled_print = make_fake_print_reffed (device, NULL);
   g_autoptr(FpPrint) out_print = NULL;
   g_autoptr(MatchCbData) match_data = g_new0 (MatchCbData, 1);
   FpDeviceClass *dev_class = FP_DEVICE_GET_CLASS (device);
@@ -857,7 +919,7 @@ test_driver_verify_not_reported (void)
 
   dev_class->verify = fake_device_verify_immediate_complete;
   device = g_object_new (FPI_TYPE_DEVICE_FAKE, NULL);
-  enrolled_print = g_object_ref_sink (fp_print_new (device));
+  enrolled_print = make_fake_print_reffed (device, NULL);
 
   g_assert_true (fp_device_open_sync (device, NULL, NULL));
 
@@ -900,7 +962,7 @@ test_driver_verify_report_no_callback (void)
   dev_class->verify = fake_device_verify_complete_error;
   device = g_object_new (FPI_TYPE_DEVICE_FAKE, NULL);
   fake_dev = FPI_DEVICE_FAKE (device);
-  enrolled_print = g_object_ref_sink (fp_print_new (device));
+  enrolled_print = make_fake_print_reffed (device, NULL);
 
   g_assert_true (fp_device_open_sync (device, NULL, NULL));
 
@@ -940,7 +1002,7 @@ test_driver_verify_complete_retry (void)
   dev_class->verify = fake_device_verify_complete_error;
   device = g_object_new (FPI_TYPE_DEVICE_FAKE, NULL);
   fake_dev = FPI_DEVICE_FAKE (device);
-  enrolled_print = g_object_ref_sink (fp_print_new (device));
+  enrolled_print = make_fake_print_reffed (device, NULL);
 
   g_assert_true (fp_device_open_sync (device, NULL, NULL));
 
@@ -1033,7 +1095,7 @@ test_driver_verify_complete_retry (void)
   test_driver_match_data_clear (match_data);
   fake_dev->ret_result = FPI_MATCH_ERROR;
   fake_dev->ret_error = fpi_device_retry_new (FP_DEVICE_RETRY_TOO_SHORT);
-  fake_dev->ret_print = fp_print_new (device);
+  fake_dev->ret_print = make_fake_print (device, NULL);
   g_object_add_weak_pointer (G_OBJECT (fake_dev->ret_print),
                              (gpointer) (&fake_dev->ret_print));
 
@@ -1087,15 +1149,11 @@ test_driver_identify (void)
   g_autoptr(FpPrint) print = NULL;
   g_autoptr(FpPrint) matched_print = NULL;
   g_autoptr(FpAutoCloseDevice) device = auto_close_fake_device_new ();
-  g_autoptr(GPtrArray) prints = g_ptr_array_new_with_free_func (g_object_unref);
+  g_autoptr(GPtrArray) prints = make_fake_prints_gallery (device, 500);
   g_autoptr(MatchCbData) match_data = g_new0 (MatchCbData, 1);
   FpDeviceClass *dev_class = FP_DEVICE_GET_CLASS (device);
   FpiDeviceFake *fake_dev = FPI_DEVICE_FAKE (device);
   FpPrint *expected_matched;
-  unsigned int i;
-
-  for (i = 0; i < 500; ++i)
-    g_ptr_array_add (prints, g_object_ref_sink (fp_print_new (device)));
 
   expected_matched = g_ptr_array_index (prints, g_random_int_range (0, 499));
   fp_print_set_description (expected_matched, "fake-verified");
@@ -1127,14 +1185,10 @@ test_driver_identify_fail (void)
   g_autoptr(FpPrint) print = NULL;
   g_autoptr(FpPrint) matched_print = NULL;
   g_autoptr(FpAutoCloseDevice) device = auto_close_fake_device_new ();
-  g_autoptr(GPtrArray) prints = g_ptr_array_new_with_free_func (g_object_unref);
+  g_autoptr(GPtrArray) prints = make_fake_prints_gallery (device, 500);
   g_autoptr(MatchCbData) match_data = g_new0 (MatchCbData, 1);
   FpDeviceClass *dev_class = FP_DEVICE_GET_CLASS (device);
   FpiDeviceFake *fake_dev = FPI_DEVICE_FAKE (device);
-  unsigned int i;
-
-  for (i = 0; i < 500; ++i)
-    g_ptr_array_add (prints, g_object_ref_sink (fp_print_new (device)));
 
   g_assert_true (fp_device_supports_identify (device));
 
@@ -1163,15 +1217,11 @@ test_driver_identify_retry (void)
   g_autoptr(FpPrint) print = NULL;
   g_autoptr(FpPrint) matched_print = NULL;
   g_autoptr(FpAutoCloseDevice) device = auto_close_fake_device_new ();
-  g_autoptr(GPtrArray) prints = g_ptr_array_new_with_free_func (g_object_unref);
+  g_autoptr(GPtrArray) prints = make_fake_prints_gallery (device, 500);
   g_autoptr(MatchCbData) match_data = g_new0 (MatchCbData, 1);
   FpDeviceClass *dev_class = FP_DEVICE_GET_CLASS (device);
   FpiDeviceFake *fake_dev = FPI_DEVICE_FAKE (device);
   FpPrint *expected_matched;
-  unsigned int i;
-
-  for (i = 0; i < 500; ++i)
-    g_ptr_array_add (prints, g_object_ref_sink (fp_print_new (device)));
 
   expected_matched = g_ptr_array_index (prints, g_random_int_range (0, 499));
   fp_print_set_description (expected_matched, "fake-verified");
@@ -1201,15 +1251,11 @@ test_driver_identify_error (void)
   g_autoptr(FpPrint) print = NULL;
   g_autoptr(FpPrint) matched_print = NULL;
   g_autoptr(FpAutoCloseDevice) device = auto_close_fake_device_new ();
-  g_autoptr(GPtrArray) prints = g_ptr_array_new_with_free_func (g_object_unref);
+  g_autoptr(GPtrArray) prints = make_fake_prints_gallery (device, 500);
   g_autoptr(MatchCbData) match_data = g_new0 (MatchCbData, 1);
   FpDeviceClass *dev_class = FP_DEVICE_GET_CLASS (device);
   FpiDeviceFake *fake_dev = FPI_DEVICE_FAKE (device);
   FpPrint *expected_matched;
-  unsigned int i;
-
-  for (i = 0; i < 500; ++i)
-    g_ptr_array_add (prints, g_object_ref_sink (fp_print_new (device)));
 
   expected_matched = g_ptr_array_index (prints, g_random_int_range (0, 499));
   fp_print_set_description (expected_matched, "fake-verified");
@@ -1243,15 +1289,12 @@ test_driver_identify_not_reported (void)
 {
   g_autoptr(FpAutoResetClass) dev_class = auto_reset_device_class ();
   g_autoptr(FpAutoCloseDevice) device = NULL;
-  g_autoptr(GPtrArray) prints = g_ptr_array_new_with_free_func (g_object_unref);
+  g_autoptr(GPtrArray) prints = NULL;
   g_autoptr(GError) error = NULL;
-  unsigned int i;
 
   dev_class->identify = fake_device_identify_immediate_complete;
   device = g_object_new (FPI_TYPE_DEVICE_FAKE, NULL);
-
-  for (i = 0; i < 500; ++i)
-    g_ptr_array_add (prints, g_object_ref_sink (fp_print_new (device)));
+  prints = make_fake_prints_gallery (device, 500);
 
   g_assert_true (fp_device_open_sync (device, NULL, NULL));
 
@@ -1283,21 +1326,18 @@ static void
 test_driver_identify_complete_retry (void)
 {
   g_autoptr(FpAutoResetClass) dev_class = auto_reset_device_class ();
-  g_autoptr(GPtrArray) prints = g_ptr_array_new_with_free_func (g_object_unref);
+  g_autoptr(GPtrArray) prints = NULL;
   g_autoptr(MatchCbData) match_data = g_new0 (MatchCbData, 1);
   g_autoptr(FpAutoCloseDevice) device = NULL;
   g_autoptr(FpPrint) print = NULL;
   g_autoptr(FpPrint) match = NULL;
   g_autoptr(GError) error = NULL;
   FpiDeviceFake *fake_dev;
-  int i;
 
   dev_class->identify = fake_device_identify_complete_error;
   device = g_object_new (FPI_TYPE_DEVICE_FAKE, NULL);
   fake_dev = FPI_DEVICE_FAKE (device);
-
-  for (i = 0; i < 500; ++i)
-    g_ptr_array_add (prints, g_object_ref_sink (fp_print_new (device)));
+  prints = make_fake_prints_gallery (device, 500);
 
   g_assert_true (fp_device_open_sync (device, NULL, NULL));
 
@@ -1326,7 +1366,7 @@ test_driver_identify_complete_retry (void)
                          "*Driver reported a match to a print that was not in the gallery*");
 
   test_driver_match_data_clear (match_data);
-  fake_dev->ret_match = fp_print_new (device);
+  fake_dev->ret_match = make_fake_print_reffed (device, NULL);
   g_object_add_weak_pointer (G_OBJECT (fake_dev->ret_match),
                              (gpointer) (&fake_dev->ret_match));
   fp_device_identify_sync (device, prints, NULL, test_driver_match_cb, match_data,
@@ -1349,7 +1389,7 @@ test_driver_identify_complete_retry (void)
   test_driver_match_data_clear (match_data);
   fake_dev->ret_error = fpi_device_retry_new (FP_DEVICE_RETRY_REMOVE_FINGER);
   fake_dev->ret_match = prints->pdata[0];
-  fake_dev->ret_print = fp_print_new (device);
+  fake_dev->ret_print = make_fake_print (device, NULL);
   g_object_add_weak_pointer (G_OBJECT (fake_dev->ret_print),
                              (gpointer) (&fake_dev->ret_print));
   fp_device_identify_sync (device, prints, NULL, test_driver_match_cb, match_data,
@@ -1371,7 +1411,7 @@ test_driver_identify_report_no_callback (void)
 {
   g_autoptr(FpAutoResetClass) dev_class = auto_reset_device_class ();
   g_autoptr(MatchCbData) match_data = g_new0 (MatchCbData, 1);
-  g_autoptr(GPtrArray) prints = g_ptr_array_new_with_free_func (g_object_unref);
+  g_autoptr(GPtrArray) prints = NULL;
   g_autoptr(FpAutoCloseDevice) device = NULL;
   G_GNUC_UNUSED g_autoptr(FpPrint) enrolled_print = NULL;
   g_autoptr(FpPrint) print = NULL;
@@ -1382,7 +1422,8 @@ test_driver_identify_report_no_callback (void)
   dev_class->identify = fake_device_identify_complete_error;
   device = g_object_new (FPI_TYPE_DEVICE_FAKE, NULL);
   fake_dev = FPI_DEVICE_FAKE (device);
-  enrolled_print = g_object_ref_sink (fp_print_new (device));
+  prints = make_fake_prints_gallery (device, 0);
+  enrolled_print = make_fake_print_reffed (device, NULL);
 
   g_assert_true (fp_device_open_sync (device, NULL, NULL));
 
@@ -1509,15 +1550,10 @@ test_driver_list (void)
 {
   g_autoptr(GError) error = NULL;
   g_autoptr(FpAutoCloseDevice) device = auto_close_fake_device_new ();
+  g_autoptr(GPtrArray) prints = make_fake_prints_gallery (device, 500);
   FpDeviceClass *dev_class = FP_DEVICE_GET_CLASS (device);
   FpiDeviceFake *fake_dev = FPI_DEVICE_FAKE (device);
 
-  g_autoptr(GPtrArray) prints = g_ptr_array_new_with_free_func (g_object_unref);
-  unsigned int i;
-
-  for (i = 0; i < 500; ++i)
-    g_ptr_array_add (prints, fp_print_new (device));
-
   fake_dev->ret_list = g_steal_pointer (&prints);
   prints = fp_device_list_prints_sync (device, NULL, &error);
 
@@ -1570,7 +1606,7 @@ test_driver_delete (void)
 {
   g_autoptr(GError) error = NULL;
   g_autoptr(FpAutoCloseDevice) device = auto_close_fake_device_new ();
-  g_autoptr(FpPrint) enrolled_print = fp_print_new (device);
+  g_autoptr(FpPrint) enrolled_print = make_fake_print_reffed (device, NULL);
   FpDeviceClass *dev_class = FP_DEVICE_GET_CLASS (device);
   FpiDeviceFake *fake_dev = FPI_DEVICE_FAKE (device);
   gboolean ret;
@@ -1587,7 +1623,7 @@ test_driver_delete_error (void)
 {
   g_autoptr(GError) error = NULL;
   g_autoptr(FpAutoCloseDevice) device = auto_close_fake_device_new ();
-  g_autoptr(FpPrint) enrolled_print = fp_print_new (device);
+  g_autoptr(FpPrint) enrolled_print = make_fake_print_reffed (device, NULL);
   FpDeviceClass *dev_class = FP_DEVICE_GET_CLASS (device);
   FpiDeviceFake *fake_dev = FPI_DEVICE_FAKE (device);
   gboolean ret;
@@ -1655,7 +1691,7 @@ test_driver_cancel (void)
   device = auto_close_fake_device_new ();
   fake_dev = FPI_DEVICE_FAKE (device);
   cancellable = g_cancellable_new ();
-  enrolled_print = fp_print_new (device);
+  enrolled_print = make_fake_print_reffed (device, NULL);
 
   fp_device_delete_print (device, enrolled_print, cancellable,
                           on_driver_cancel_delete, &completed);
@@ -1673,7 +1709,7 @@ test_driver_cancel_fail (void)
   g_autoptr(GError) error = NULL;
   g_autoptr(FpAutoCloseDevice) device = auto_close_fake_device_new ();
   g_autoptr(GCancellable) cancellable = g_cancellable_new ();
-  g_autoptr(FpPrint) enrolled_print = fp_print_new (device);
+  g_autoptr(FpPrint) enrolled_print = make_fake_print_reffed (device, NULL);
   FpDeviceClass *dev_class = FP_DEVICE_GET_CLASS (device);
   FpiDeviceFake *fake_dev = FPI_DEVICE_FAKE (device);
 
@@ -1907,8 +1943,8 @@ static void
 test_driver_action_error_all (void)
 {
   g_autoptr(FpAutoCloseDevice) device = g_object_new (FPI_TYPE_DEVICE_FAKE, NULL);
-  g_autoptr(FpPrint) enrolled_print = g_object_ref_sink (fp_print_new (device));
-  g_autoptr(GPtrArray) prints = g_ptr_array_new_with_free_func (g_object_unref);
+  g_autoptr(FpPrint) enrolled_print = make_fake_print_reffed (device, NULL);
+  g_autoptr(GPtrArray) prints = make_fake_prints_gallery (device, 0);
   g_autoptr(GError) error = NULL;
   FpDeviceClass *dev_class = FP_DEVICE_GET_CLASS (device);
   FpiDeviceFake *fake_dev;
@@ -1978,8 +2014,8 @@ static void
 test_driver_action_error_fallback_all (void)
 {
   g_autoptr(FpAutoCloseDevice) device = g_object_new (FPI_TYPE_DEVICE_FAKE, NULL);
-  g_autoptr(FpPrint) enrolled_print = g_object_ref_sink (fp_print_new (device));
-  g_autoptr(GPtrArray) prints = g_ptr_array_new_with_free_func (g_object_unref);
+  g_autoptr(FpPrint) enrolled_print = make_fake_print_reffed (device, NULL);
+  g_autoptr(GPtrArray) prints = make_fake_prints_gallery (device, 0);
   g_autoptr(GError) error = NULL;
   FpDeviceClass *dev_class = FP_DEVICE_GET_CLASS (device);
   FpiDeviceFake *fake_dev;
